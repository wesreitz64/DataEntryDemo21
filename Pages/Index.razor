@page "/"
@using System.ComponentModel.DataAnnotations;
@using DataEntryDemo.Utils.Attributes;

<PageTitle>Data Entry Demo</PageTitle>
<h2>Enter Details</h2>

<EditForm Model="@CarData" OnValidSubmit="OnHandleSubmit" OnInvalidSubmit="OnHandleInvalidSubmit">
	<DataAnnotationsValidator />

	@* <div style="width:100%">
		<ValidationSummary />
	</div><br /> *@
	<div style="width: 50%; float:left;margin-top: 5px;">
		<label style="width: 90%;">
			Name<br />
			<InputText @bind-Value="CarData.Car.Name" class="form-control" style="width: 100%;" placeholder="Name"></InputText>
			<ValidationMessage For="@(() => CarData.Car.Name)" />
		</label><br /><br />
		<label style="width: 90%;">
			Color<br />
			<InputSelect @bind-Value="CarData.Car.ColorId" class="form-control" style="width: 100%;">
				@if (CarData?.Colors != null)
				{
					@foreach (var color in CarData.Colors)
					{
						<option value="@color.Id">@color.Description</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => CarData.Car.ColorId)" />
		</label><br /><br />
		<label style="width: 90%;">
			Year<br />
			<InputText @bind-Value="CarData.Car.Year" class="form-control" style="width: 100%;"></InputText>
			<ValidationMessage For="@(() => CarData.Car.Year)" />
		</label><br /><br />
		<label style="width: 90%;">
			Model<br />
			<InputSelect @bind-Value="CarData.Car.ModelId" class="form-control" style="width: 100%;">
				@if (CarData?.Models != null)
				{
					@foreach (var model in CarData.Models)
					{
						<option value="@model.Id">@model.Description</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => CarData.Car.ModelId)" />
		</label><br /><br />
		<label style="width: 90%;">
			Quanity<br />
			<InputText @bind-Value="CarData.Car.Quantity" class="form-control" style="width: 100%;"></InputText>
			<ValidationMessage For="@(() => CarData.Car.Quantity)" />
		</label><br /><br />
		<button @onclick="@(() => CarData = new())" class="btn btn-secondary" tabindex="0" style="float:left;">Cancel</button>
	</div>
	<div style="width: 50%; float:left;">
		<label style="width: 90%;">
			Release Date<br />
			<InputDate @bind-Value="CarData.Car.ReleaseDate" class="form-control" style="width: 100%;" placeholder="Release Date"></InputDate>
			<ValidationMessage For="@(() => CarData.Car.ReleaseDate)" />
		</label><br /><br />
		<label style="width: 90%;">
			Last Available Date<br />
			<InputDate @bind-Value="CarData.Car.LastAvailableDate" class="form-control" style="width: 100%;"></InputDate>
			<ValidationMessage For="@(() => CarData.Car.LastAvailableDate)" />
		</label><br /><br />
		<label style="width: 90%;">
			Total<br />
			<InputText @bind-Value="CarData.Car.Total" class="form-control" style="width: 100%;"></InputText>
			<ValidationMessage For="@(() => CarData.Car.Total)" />
		</label><br /><br />
		<label style="width: 90%;">
			Owner<br />
			<InputText @bind-Value="CarData.Car.Owner" class="form-control" style="width: 100%;"></InputText>
			<ValidationMessage For="@(() => CarData.Car.Owner)" />
		</label><br /><br />
		<label style="width: 90%;">
			Status<br />
			<InputSelect @bind-Value="CarData.Car.StatusId" class="form-control" style="width: 100%;">
				@if (CarData?.Statuses != null)
				{
					@foreach (var status in CarData.Statuses)
					{
						<option value="@status.Id">@status.Description</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => CarData.Car.StatusId)" />
		</label><br /><br />
		<button type="submit" tabindex="0" class="btn btn-primary" style="float:right;margin-right: 10%;">Create</button>
	</div>
</EditForm>


@code {
	[Inject] public PlaywrightService playwrightService { get; set; } 
	public CarModel? CarData { get; set; }
	public bool ValidSubmit { get; set; } = false;

	protected async Task OnHandleSubmit()
	{
		await playwrightService.ExecuteFormAutomationAsync();
		var errors = new Dictionary<string, List<string>>();

		if (String.IsNullOrEmpty(CarData.Car.Name))
		{
			errors.Add(nameof(CarData.Car.Name), new() { "Name is required" });
		}

		if (errors.Any())
		{
		}

		@if (ValidSubmit)
		{
			Console.WriteLine("Successful submission");
		}
	}

	protected void OnHandleInvalidSubmit()
	{


	}

	protected void Cancel()
	{


	}
	protected async override Task OnInitializedAsync()
	{
		CarData = new CarModel();

		CarData.Colors = await PopulateColors();
		CarData.Models = await PopulateModels();
		CarData.Statuses = await PopulateStatus();

		base.OnInitialized();
	}

	protected void Dispose()
	{
	}

	private async Task<List<Color>> PopulateColors()
	{
		return await Task.Run(() =>
			new List<Color>()
			{
				new Color() { Id = 0, Description = ""},
				new Color() { Id = 1, Description = "Black"},
				new Color() { Id = 2, Description = "White"},
				new Color() { Id = 3, Description = "Blue"},
				new Color() { Id = 4, Description = "Silver"},
				new Color() { Id = 5, Description = "Red"}
			});
	}

	private async Task<List<Model>> PopulateModels()
	{
		return await Task.Run(() =>
			new List<Model>()
				{
				new Model() { Id = 0, Description = ""},
				new Model() { Id = 1, Description = "Honda"},
				new Model() { Id = 2, Description = "Mercedes"},
				new Model() { Id = 3, Description = "BMW"},
				new Model() { Id = 4, Description = "Range Rover"},
				new Model() { Id = 5, Description = "Mazda"}
				});

	}

	private async Task<List<Status>> PopulateStatus()
	{
		return await Task.Run(() =>
			new List<Status>()
					{
				new Status() { Id = 0, Description = ""},
				new Status() { Id = 1, Description = "New"},
				new Status() { Id = 2, Description = "Used"},
				new Status() { Id = 3, Description = "Pre-owned"},
				new Status() { Id = 4, Description = "Mint"},
				new Status() { Id = 5, Description = "Questionable"}
					});
	}


	public class CarModel
	{
		[Required]
		public Car? Car { set; get; } = new Car();
		public List<Color>? Colors { set; get; } = new List<Color>();
		public List<Model>? Models { set; get; } = new List<Model>();
		public List<Status>? Statuses { set; get; } = new List<Status>();
	}

	public class Car
	{
		[Required]
		public string Name { set; get; } = "";
		[Required]
		[Range(1, 5)]
		public int ColorId { set; get; } = 0;
		[Required]
		[Range(2000, 2025)]
		public string? Year { set; get; } = null;
		[Required]
		[Range(1, 5)]
		public int ModelId { set; get; } = 0;
		[Required]
		[Range(1, 10)]
		public string? Quantity { set; get; } = null;
		[Required]
		[DataType(DataType.DateTime)]
		[DateMustBeBefore(nameof(LastAvailableDate))]
		public DateTime? ReleaseDate { set; get; } = null;
		[Required]
		[DateMustBeAfter(nameof(ReleaseDate))]
		[DataType(DataType.DateTime)]
		public DateTime? LastAvailableDate { set; get; } = null;
		[Required]
		public string? Total { set; get; } = null;
		[Required]
		public string? Owner { set; get; } = null;
		[Required]
		[Range(1, 5)]
		public int StatusId { set; get; } = 0;
	}

	public class Color
	{
		public int Id { set; get; }
		public string? Description { set; get; }
	}

	public class Model
	{
		public int Id { set; get; }
		public string? Description { set; get; }
	}

	public class Status
	{
		public int Id { set; get; }
		public string? Description { set; get; }
	}
}